// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var DBErrors$DbErrors = require("../src/DBErrors.bs.js");

Jest.describe("DBErrors", (function (param) {
        Jest.describe("Success('a)", (function (param) {
                var actual = /* Success */Block.__(1, [""]);
                Jest.test("isSuccess to be true", (function (param) {
                        return Jest.Expect.toBe(true, Jest.Expect.expect(DBErrors$DbErrors.isSuccess(actual)));
                      }));
                return Jest.test("isFailure to be false", (function (param) {
                              return Jest.Expect.toBe(false, Jest.Expect.expect(DBErrors$DbErrors.isFailure(actual)));
                            }));
              }));
        Jest.describe("Failure('e)", (function (param) {
                var actual = /* Failure */Block.__(0, [""]);
                Jest.test("isSuccess to be false", (function (param) {
                        return Jest.Expect.toBe(false, Jest.Expect.expect(DBErrors$DbErrors.isSuccess(actual)));
                      }));
                return Jest.test("isFailure to be true", (function (param) {
                              return Jest.Expect.toBe(true, Jest.Expect.expect(DBErrors$DbErrors.isFailure(actual)));
                            }));
              }));
        Jest.describe("andMap", (function (param) {
                return Jest.test("Success", (function (param) {
                              return Jest.Expect.toEqual(/* Success */Block.__(1, ["before after"]), Jest.Expect.expect(DBErrors$DbErrors.andMap(/* Success */Block.__(1, ["before"]), /* Success */Block.__(1, [(function (before) {
                                                        return before + " after";
                                                      })]))));
                            }));
              }));
        Jest.describe("map", (function (param) {
                var mapper = function (before) {
                  return before + " after";
                };
                Jest.test("Success", (function (param) {
                        return Jest.Expect.toEqual(/* Success */Block.__(1, ["before after"]), Jest.Expect.expect(DBErrors$DbErrors.map(mapper, /* Success */Block.__(1, ["before"]))));
                      }));
                return Jest.test("Failure", (function (param) {
                              return Jest.Expect.toEqual(/* Failure */Block.__(0, ["failure"]), Jest.Expect.expect(DBErrors$DbErrors.map(mapper, /* Failure */Block.__(0, ["failure"]))));
                            }));
              }));
        Jest.describe("map2", (function (param) {
                var mapper = function (before1, before2) {
                  return before1 + (" " + (before2 + " after"));
                };
                Jest.test("Success", (function (param) {
                        return Jest.Expect.toEqual(/* Success */Block.__(1, ["before1 before2 after"]), Jest.Expect.expect(DBErrors$DbErrors.map2(mapper, /* Success */Block.__(1, ["before1"]), /* Success */Block.__(1, ["before2"]))));
                      }));
                Jest.test("Failure - first", (function (param) {
                        return Jest.Expect.toEqual(/* Failure */Block.__(0, ["failure1"]), Jest.Expect.expect(DBErrors$DbErrors.map2(mapper, /* Failure */Block.__(0, ["failure1"]), /* Failure */Block.__(0, ["failure2"]))));
                      }));
                return Jest.test("Failure - second", (function (param) {
                              return Jest.Expect.toEqual(/* Failure */Block.__(0, ["failure2"]), Jest.Expect.expect(DBErrors$DbErrors.map2(mapper, /* Success */Block.__(1, ["failure1"]), /* Failure */Block.__(0, ["failure2"]))));
                            }));
              }));
        Jest.describe("map3", (function (param) {
                var mapper = function (before1, before2, before3) {
                  return before1 + (" " + (before2 + (" " + (before3 + " after"))));
                };
                Jest.test("Success", (function (param) {
                        return Jest.Expect.toEqual(/* Success */Block.__(1, ["before1 before2 before3 after"]), Jest.Expect.expect(DBErrors$DbErrors.map3(mapper, /* Success */Block.__(1, ["before1"]), /* Success */Block.__(1, ["before2"]), /* Success */Block.__(1, ["before3"]))));
                      }));
                Jest.test("Failure - first", (function (param) {
                        return Jest.Expect.toEqual(/* Failure */Block.__(0, ["failure1"]), Jest.Expect.expect(DBErrors$DbErrors.map3(mapper, /* Failure */Block.__(0, ["failure1"]), /* Failure */Block.__(0, ["failure2"]), /* Failure */Block.__(0, ["failure3"]))));
                      }));
                Jest.test("Failure - second", (function (param) {
                        return Jest.Expect.toEqual(/* Failure */Block.__(0, ["failure2"]), Jest.Expect.expect(DBErrors$DbErrors.map3(mapper, /* Success */Block.__(1, ["failure1"]), /* Failure */Block.__(0, ["failure2"]), /* Failure */Block.__(0, ["failure3"]))));
                      }));
                return Jest.test("Failure - third", (function (param) {
                              return Jest.Expect.toEqual(/* Failure */Block.__(0, ["failure3"]), Jest.Expect.expect(DBErrors$DbErrors.map3(mapper, /* Success */Block.__(1, ["failure1"]), /* Success */Block.__(1, ["failure2"]), /* Failure */Block.__(0, ["failure3"]))));
                            }));
              }));
        Jest.describe("mapError", (function (param) {
                var mapper = function (before) {
                  return before + " after";
                };
                Jest.test("Success", (function (param) {
                        return Jest.Expect.toEqual(/* Success */Block.__(1, ["before"]), Jest.Expect.expect(DBErrors$DbErrors.mapError(mapper, /* Success */Block.__(1, ["before"]))));
                      }));
                return Jest.test("Failure", (function (param) {
                              return Jest.Expect.toEqual(/* Failure */Block.__(0, ["before after"]), Jest.Expect.expect(DBErrors$DbErrors.mapError(mapper, /* Failure */Block.__(0, ["before"]))));
                            }));
              }));
        Jest.describe("mapBoth", (function (param) {
                var successMapper = function (before) {
                  return before + " after success";
                };
                var errorMapper = function (before) {
                  return before + " after error";
                };
                Jest.test("Success", (function (param) {
                        return Jest.Expect.toEqual(/* Success */Block.__(1, ["before after success"]), Jest.Expect.expect(DBErrors$DbErrors.mapBoth(successMapper, errorMapper)(/* Success */Block.__(1, ["before"]))));
                      }));
                return Jest.test("Failure", (function (param) {
                              return Jest.Expect.toEqual(/* Failure */Block.__(0, ["before after error"]), Jest.Expect.expect(DBErrors$DbErrors.mapBoth(successMapper, errorMapper)(/* Failure */Block.__(0, ["before"]))));
                            }));
              }));
        Jest.describe("andThen", (function (param) {
                var mapper = function (before) {
                  return /* Failure */Block.__(0, [before + " after"]);
                };
                Jest.test("Success", (function (param) {
                        return Jest.Expect.toEqual(/* Failure */Block.__(0, ["before after"]), Jest.Expect.expect(DBErrors$DbErrors.andThen(mapper, /* Success */Block.__(1, ["before"]))));
                      }));
                return Jest.test("Failure", (function (param) {
                              return Jest.Expect.toEqual(/* Failure */Block.__(0, ["before"]), Jest.Expect.expect(DBErrors$DbErrors.andThen(mapper, /* Failure */Block.__(0, ["before"]))));
                            }));
              }));
        Jest.describe("withDefault", (function (param) {
                Jest.test("Success", (function (param) {
                        return Jest.Expect.toBe("got success", Jest.Expect.expect(DBErrors$DbErrors.withDefault("got default", /* Success */Block.__(1, ["got success"]))));
                      }));
                return Jest.test("Failure", (function (param) {
                              return Jest.Expect.toBe("got default", Jest.Expect.expect(DBErrors$DbErrors.withDefault("got default", /* Failure */Block.__(0, ["got failure"]))));
                            }));
              }));
        Jest.describe("fromResult", (function (param) {
                Jest.test("Ok", (function (param) {
                        return Jest.Expect.toEqual(/* Success */Block.__(1, ["from result"]), Jest.Expect.expect(DBErrors$DbErrors.fromResult(/* Ok */Block.__(0, ["from result"]))));
                      }));
                return Jest.test("Error", (function (param) {
                              return Jest.Expect.toEqual(/* Failure */Block.__(0, ["from result"]), Jest.Expect.expect(DBErrors$DbErrors.fromResult(/* Error */Block.__(1, ["from result"]))));
                            }));
              }));
        Jest.describe("toOption", (function (param) {
                Jest.test("Success", (function (param) {
                        return Jest.Expect.toEqual("got success", Jest.Expect.expect(DBErrors$DbErrors.toOption(/* Success */Block.__(1, ["got success"]))));
                      }));
                return Jest.test("Failure", (function (param) {
                              return Jest.Expect.toEqual(undefined, Jest.Expect.expect(DBErrors$DbErrors.toOption(/* Failure */Block.__(0, ["got failure"]))));
                            }));
              }));
        Jest.describe("append", (function (param) {
                Jest.test("Success(a) + Success(b) = Success((a, b))", (function (param) {
                        return Jest.Expect.toEqual(/* Success */Block.__(1, [/* tuple */[
                                        "a",
                                        "b"
                                      ]]), Jest.Expect.expect(DBErrors$DbErrors.append(/* Success */Block.__(1, ["a"]), /* Success */Block.__(1, ["b"]))));
                      }));
                Jest.test("Failure(a) + Success(b) = Failure(a)", (function (param) {
                        return Jest.Expect.toEqual(/* Failure */Block.__(0, ["a"]), Jest.Expect.expect(DBErrors$DbErrors.append(/* Failure */Block.__(0, ["a"]), /* Success */Block.__(1, ["b"]))));
                      }));
                return Jest.test("Success(a) + Failure(b)", (function (param) {
                              return Jest.Expect.toEqual(/* Failure */Block.__(0, ["b"]), Jest.Expect.expect(DBErrors$DbErrors.append(/* Success */Block.__(1, ["a"]), /* Failure */Block.__(0, ["b"]))));
                            }));
              }));
        Jest.describe("succeed", (function (param) {
                Jest.test("a => Success(a)", (function (param) {
                        return Jest.Expect.toEqual(/* Success */Block.__(1, ["got success"]), Jest.Expect.expect(DBErrors$DbErrors.succeed("got success")));
                      }));
                
              }));
        Jest.describe("isSuccess", (function (param) {
                Jest.test("Success returns true", (function (param) {
                        return Jest.Expect.toBe(true, Jest.Expect.expect(DBErrors$DbErrors.isSuccess(/* Success */Block.__(1, ["got success"]))));
                      }));
                return Jest.test("Failure returns false", (function (param) {
                              return Jest.Expect.toBe(false, Jest.Expect.expect(DBErrors$DbErrors.isSuccess(/* Failure */Block.__(0, ["got failure"]))));
                            }));
              }));
        return Jest.describe("isFailure", (function (param) {
                      Jest.test("Success returns false", (function (param) {
                              return Jest.Expect.toBe(false, Jest.Expect.expect(DBErrors$DbErrors.isFailure(/* Success */Block.__(1, ["got success"]))));
                            }));
                      return Jest.test("Failure returns true", (function (param) {
                                    return Jest.Expect.toBe(true, Jest.Expect.expect(DBErrors$DbErrors.isFailure(/* Failure */Block.__(0, ["got failure"]))));
                                  }));
                    }));
      }));

/*  Not a pure module */
