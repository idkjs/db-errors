// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function $at$bang(a, b, c) {
  return Curry._1(a, Curry._1(b, c));
}

function andMap(wrappedValue, wrappedFunction) {
  if (wrappedFunction.tag) {
    if (wrappedValue.tag) {
      return /* Success */Block.__(1, [Curry._1(wrappedFunction[0], wrappedValue[0])]);
    } else {
      return /* Failure */Block.__(0, [wrappedValue[0]]);
    }
  } else {
    return /* Failure */Block.__(0, [wrappedFunction[0]]);
  }
}

function map(f, data) {
  if (data.tag) {
    return /* Success */Block.__(1, [Curry._1(f, data[0])]);
  } else {
    return /* Failure */Block.__(0, [data[0]]);
  }
}

function map2(f, a, b) {
  return andMap(b, map(f, a));
}

function map3(f, a, b, c) {
  return andMap(c, andMap(b, map(f, a)));
}

function mapError(f, data) {
  if (data.tag) {
    return /* Success */Block.__(1, [data[0]]);
  } else {
    return /* Failure */Block.__(0, [Curry._1(f, data[0])]);
  }
}

function mapBoth(successFn, errorFn) {
  return (function (param) {
      return mapError(errorFn, map(successFn, param));
    });
}

function andThen(f, data) {
  if (data.tag) {
    return Curry._1(f, data[0]);
  } else {
    return data;
  }
}

function withDefault($$default, data) {
  if (data.tag) {
    return data[0];
  } else {
    return $$default;
  }
}

function fromResult(x) {
  if (x.tag) {
    return /* Failure */Block.__(0, [x[0]]);
  } else {
    return /* Success */Block.__(1, [x[0]]);
  }
}

function toOption(a) {
  if (a.tag) {
    return Caml_option.some(a[0]);
  }
  
}

function append(a, b) {
  return andMap(b, map((function (a, b) {
                    return /* tuple */[
                            a,
                            b
                          ];
                  }), a));
}

function succeed(a) {
  return /* Success */Block.__(1, [a]);
}

function isSuccess(_a) {
  if (_a.tag) {
    return true;
  } else {
    return false;
  }
}

function isFailure(_e) {
  if (_e.tag) {
    return false;
  } else {
    return true;
  }
}

exports.$at$bang = $at$bang;
exports.andMap = andMap;
exports.map = map;
exports.map2 = map2;
exports.map3 = map3;
exports.mapError = mapError;
exports.mapBoth = mapBoth;
exports.andThen = andThen;
exports.withDefault = withDefault;
exports.fromResult = fromResult;
exports.toOption = toOption;
exports.append = append;
exports.succeed = succeed;
exports.isSuccess = isSuccess;
exports.isFailure = isFailure;
/* No side effect */
